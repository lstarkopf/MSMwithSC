# MSMwithSC
* Web appendix

This is the web appendix to our manuscript entitled /Marginal structural models with monotonicity constraints: a case
study in out-of-hospital cardiac arrest patients/.

We are motivated by a study that examines the effect of bystander cardiopulmonary resuscitation (CPR)
on the 30-day survival probability as a function of ambulance
response time. In particular, we are interested in the in the counterfactual 30-day
survival probability in out-of-hospital cardiac arrest (OHCA) patients if:
- all patients had received had received bystander cardiopulmonary resuscitation (CPR)
- none of the patients had received CPR

as a function of ambulance response time. For any given patient, it is
natural to assume that the 30-day survival chances do not increase
when the ambulance response time increases.

In our manuscript we propose an estimation procedure based on a
marginal structural model (MSM) that respects a given monotonicity
contraint between a continuous covariate of interest,
ambulance response time in our example, and a binary outcome, 30-day
survival in our example.

In this web appendix we present the =R= codes that implement our method and
the =R= codes that we used for the simulation study presented in the
manuscript.


** Preparation
To run the code chunks below you need to load the following =R=
packages:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes
library(scam)
library(lava)
library(data.table)
library(ggplot2)
library(scales)
library(grid)
library(rms)
library(parallel)
library(prodlim)
library(devtools)
#+END_SRC

We also load the =R= codes (you can as well clone the repository and use source instead of source_url)
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output raw  :exports code  :session *R* :cache yes
for(f in c("doMSMwithSC.R","generate_data.R","plot.simloop.R","sim.loop.R","summary.simloop.R")){
  source_url(paste0("https://raw.githubusercontent.com/lstarkopf/MSMwithSC/main/R/",f))
}
#+END_SRC

* Usage

** generate_data
The function =generate_data= is used to simulate data.  The arguments
are:
- =n= the sample size
- =alpha= regression parameters for the treatment model: a vector
  where the first element is the intercept and the remaining elements
  are the covariate effect sizes for the treatment logistic regression model on the log-odds scale.
- =beta= regression parameters for the outcome model: a vector where
  the first element is the intercept and the remaining elements are the covariate effect sizes for the outcome logistic regression model on the log-odds scale.
- =gamma= regression parameters for the continuous covariate of intest
  model: a vector where the first element is the intercept and the
  remaining elements the covariate effect sizes for the covariate fo interest regression model.
- =unif= if =TRUE= specify a uniform distribution for the continuous
  covariate of interest, otherwise use Gamma distribution.

We estimate the counterfactual 30-day survival probabilities (had all
versus no one received bystander CPR) by calling the function
=doMSMwithSC= with arguments:
- =outcome= outcome variable
- =treatment= treatment variable
- =smooth= smooth expression of the monotone function of the covariate of interest
- =covariates= vector of baseline covariates
- =Gformula= formula for the auxiliary outcome regression model used in
  g-formula approach
- =data= dataset
- =grid= grid of values for the continuous covariate of interest


Generate data (with fixed seed)

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output  :exports both  :session *R* :cache yes
set.seed(17)
d=generate_data(n=500,
                alpha=c(1.5,0.1,-0.03),
                beta=c(2,1.3,-0.9,0.2,-0.04),
                gamma=rep(0,3),
                unif=FALSE)
head(d)
#+END_SRC

#+RESULTS[<2022-08-27 12:30:56> 18d42e925e9b01f2c8f9635d04cbed555ceed0ef]:
:   C1       C2          Z A A0 A1 set.Y0 set.Y1        m0 Y
: 1  1 68.89249  2.8292071 0  0  1      0      0 1.3426577 0
: 2  1 64.52226  5.1811659 0  0  1      0      0 1.8215069 0
: 3  1 64.57243 11.7335715 0  0  1      0      0 2.5442419 0
: 4  1 68.26281  8.4890214 1  0  1      0      0 2.2501355 0
: 5  1 66.24554  8.8481369 0  0  1      0      1 2.2872823 0
: 6  0 66.49033  0.8152458 1  0  1      0      1 0.5962209 1


In the dataset, Y is the outcome, A the treatment, A0 and A1 are the
fixed values of treatment corresponding to nobody having treatment
and everyone having treatment, respcetively. Variable Z is the continuous
covariate of interest and m0 is the value of the monotone function of
the covariate of interest (Z) evaluated at Z. Variables C1 and C2 are
a discrete baseline covariate and a continuous baseline covariate,
respectively.

** Estimation

We estimate the counterfactual 30-day survival probabilities (had all
versus no one received bystander CPR) by calling the function
=doMSMwithSC= with arguments:
- =outcome= outcome variable
- =treatment= treatment variable
- =smooth= smooth expression of the monotone function of the covariate of interest
- =covariates= vector of baseline covariates
- =Gformula= formula for the auxiliary outcome regression model used in
  g-formula approach
- =data= dataset
- =grid= grid of values for the continuous covariate of interest

The following procedures with and without constraints have been
implemented in the function =doMSMwithSC=:
- Marginal structural models with monotonicity constraints (proposed
  method)
- Unconstrained g-formula

The function =doMSMwithSC= fits a logistic marginal structural model specified by the arguments =outcome=,
=treatment=, and =smooth= (i.e., =outcome~treatment+smooth=). The
estimation of the MSM requires an auxiliary regression model. We have
implemented a logistic regression model as the auxiliary regression
model. The auxiliary model is specified by the arguments =outcome=,
=treatment=, =smooth= and =covariates= (i.e.,
=outcome~treatment+smooth+covariates=). Note that both logistic regression models are fit
by the function =scam= from =R= package =scam= to allow shape
constraints in the smooth term =smooth=.

To investigate the sensitivity of the proposed method to the selection
of auxiliary regression model, we also implemented a different logistic
regression model as the auxiliary model. In particular, a model
including the correct functional form of the covariate of interest
(saved as a variable =m0= in the dataset) instead of the smooth term (i.e.,
=outcome~treatment+m0+covariates=).

The unconstrained g-formula approac also requires specifying an
auxiliary regression model. We have implemented a logistic regression
model specified by the argument
=Gformula=.\\

The output from the function call gives the estimates across
ambulance response time-points specified in the argument =grid=:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes
est <- doMSMwithSC(outcome="Y",
                   treatment="A",
                   covariates=c("C1","C2"),
                   smooth="s(Z,bs='mpd',k=25,m=2)",
                   Gformula="Y~A+C1+C2+rms:::rcs(Z,c(5,10,15,20))",
                   grid=0:20,
                   data=d)
x=summary(est)
head(x)
#+END_SRC

#+RESULTS[<2022-08-27 12:52:28> c73c717663083ee314b1a3b5f8b89fac13b74c6a]:
:       Method Covariate Survival.treated Survival.untreated
: 1: B_splines         0        0.6059858          0.2174622
: 2: B_splines         1        0.5662081          0.1908355
: 3: B_splines         2        0.5255586          0.1667743
: 4: B_splines         3        0.4845676          0.1452024
: 5: B_splines         4        0.4437832          0.1259989
: 6: B_splines         5        0.4037427          0.1090112


** Visual

To plot the estimated counterfactual 30-days survival probabilities
we can call the function =autoplot=:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes
autoplot(est,estimator="B_splines")
#+END_SRC

* Simulation study

** Data generating mechanism

To create a simulated data for setting 1, we can run the following code:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output  :session *R* :cache yes
## Set effect size for data generation
gamma <- c(0,0,0)
alpha <- c(1.5,0.1,-0.03)
beta <- c(2,1.3,-0.9,0.2,-0.04)
## Generate data (with fixed seed)
set.seed(17)
n <- 500
d1 <- generate_data(n=n,alpha=alpha,beta=beta,gamma=gamma,unif=FALSE)
head(d1)
#+END_SRC

:   C1       C2          Z A A0 A1 set.Y0 set.Y1        m0 Y
: 1  1 68.89249  2.8292071 0  0  1      0      0 1.3426577 0
: 2  1 64.52226  5.1811659 0  0  1      0      0 1.8215069 0
: 3  1 64.57243 11.7335715 0  0  1      0      0 2.5442419 0
: 4  1 68.26281  8.4890214 1  0  1      0      0 2.2501355 0
: 5  1 66.24554  8.8481369 0  0  1      0      1 2.2872823 0
: 6  0 66.49033  0.8152458 1  0  1      0      1 0.5962209 1


To create a simulated data for setting 2, we can run the following code:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output  :session *R* :cache yes
## Set effect size for data generation
gamma <- c(0,0,0)
alpha <- c(1.5,0.1,-0.03)
beta <- c(2,1.3,-0.9,0.2,-0.04)
## Generate data (with fixed seed)
set.seed(17)
n <- 500
d2 <- generate_data(n=n,alpha=alpha,beta=beta,gamma=gamma,unif=TRUE)
head(d2)
#+END_SRC

:   C1       C2         Z A A0 A1 set.Y0 set.Y1       m0 Y
: 1  1 68.89249  4.216898 0  0  1      1      0 1.651903 1
: 2  1 64.52226  7.703035 0  0  1      0      0 2.163672 0
: 3  1 64.57243  4.813056 0  0  1      0      0 1.760106 0
: 4  1 68.26281 10.256844 1  0  1      0      1 2.420976 1
: 5  1 66.24554  3.244924 1  0  1      0      0 1.445724 0
: 6  0 66.49033 18.394896 1  0  1      0      0 2.965010 0

The only difference compared to setting 1 is that the ambulance
response time is now generated from a uniform distribution as
specified by argument =unif=TRUE=.

** True counterfactual 30-day survival probabilities

We estimate the true counterfactual 30-day survival probabilities from
a large simulated data of counterfactual outcomes by using a logistic
regression model with the correct functional form of ambulance
response time. This can be done by the following =R= code:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :exports both :results output  :session *R* :cache yes
generateTruth(alpha=c(1.5,0.1,-0.03),
              beta=c(2,1.3,-0.9,0.2,-0.04),
              gamma=c(0,0,0),
              seed=17,
              sample.size=100000)
#+END_SRC

#+begin_example
$pp.yes
        2         4         6         8        10        12        14        16
0.6982873 0.5541831 0.4635628 0.4003560 0.3534103 0.3170036 0.2878583 0.2639476
       18        20        22        24        26        28        30        32
0.2439451 0.2269435 0.2122996 0.1995443 0.1883263 0.1783777 0.1694901 0.1614986
       34        36        38        40        42
0.1542716 0.1477020 0.1417022 0.1361996 0.1311337

$pp.no
         1          3          5          7          9         11         13
0.38610594 0.25250824 0.19017495 0.15357297 0.12932404 0.11200301 0.09897419
        15         17         19         21         23         25         27
0.08879667 0.08061375 0.07388303 0.06824375 0.06344639 0.05931264 0.05571158
        29         31         33         35         37         39         41
0.05254488 0.04973718 0.04722974 0.04497607 0.04293887 0.04108788 0.03939827
#+end_example


** Run Simulations
In our manuscript, we report the results of the proposed MSM estimator with monotonicity
constraints using 2 different auxiliary regression models and the unconstrained g-formula
across 2000 simulations for sample sizes 500 and 5000 in both simulation
settings.

The code of the full simulation study is in the following =R=-script:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :eval no :results none :exports code  :session *R* :cache yes
source("./Code/RunSimulations.R")
#+END_SRC

The results from the simulation study can be found in the folder
=./Results= .

The figures presented in the manuscript can be found
in the folder =./Figures= and the code producing the figures is in
the following =R=-script:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :eval no :results none :exports code  :session *R* :cache yes
source("./Code/PlotResults.R")
#+END_SRC


* Implementation for OCHA study
In our manuscript, we apply the proposed MSM with monotonicity
constraints to OCHA study.

The code for implementing the estimation method together with 95%
confidence intervals from bootstrap for this example is given in the following =R=-script:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R :eval no :results none :exports code  :session *R* :cache yes
source("./Code/Application-example-OCHA-study.R")
#+END_SRC


